{"version":3,"sources":["Components/Button/Button.js","Components/ImageGallery/ImageGallery.js","Components/ImageGalleryItem/ImageGalleryItem.js","Components/Loader/Loader.js","Components/Modal/Modal.js","Components/Searchbar/Searchbar.js","Components/PixabayApi/pixabayApi.js","App.js","index.js"],"names":["Button","fetchImages","className","onClick","ImageGallery","children","ImageGalleryItem","images","toggleModal","parseLargeImage","map","image","largeImageURL","src","webformatURL","alt","tags","id","LoaderSpinner","type","color","height","width","Modal","this","props","largeImage","Component","Searchbar","state","inputValue","heandleChange","e","setState","target","value","heandleSubmit","preventDefault","onSubmit","autoFocus","autoComplete","onChange","searchQuery","page","key","axios","get","then","response","data","hits","App","loading","showModal","error","text","scrolling","window","scrollTo","top","document","documentElement","scrollHeight","behavior","loader","PixabayApi","prevState","catch","finally","hendleSearchFormSubmit","query","url","prevProps","Loader","length","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.a9333722.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ fetchImages }) => {\r\n  return (\r\n    <div className=\"btn\">\r\n      <button className=\"btn__load-more\" onClick={fetchImages}>\r\n        Load more\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.propTypes = {\r\n  fetchImages: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ImageGallery = ({ children }) => {\r\n  return <ul className=\"ImageGallery\">{children}</ul>;\r\n};\r\n\r\nexport default ImageGallery;\r\n\r\nImageGallery.propTypes = {\r\n  children: PropTypes.object.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ImageGalleryItem = ({ images, toggleModal, parseLargeImage }) => {\r\n  return (\r\n    <>\r\n      {images.map((image) => (\r\n        <li\r\n          className=\"ImageGalleryItem\"\r\n          key={image.id}\r\n          onClick={() => parseLargeImage(image.largeImageURL)}\r\n        >\r\n          <img\r\n            className=\"ImageGalleryItem-image\"\r\n            onClick={toggleModal}\r\n            src={image.webformatURL}\r\n            alt={image.tags}\r\n          />\r\n        </li>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n\r\nImageGalleryItem.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n  parseLargeImage: PropTypes.func.isRequired,\r\n  toggleModal: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst LoaderSpinner = () => {\r\n  return (\r\n    <div>\r\n      <Loader type=\"TailSpin\" color=\"black\" height={100} width={100} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoaderSpinner;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Modal extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Overlay\" onClick={this.props.toggleModal}>\r\n        <div className=\"Modal\">\r\n          <img src={this.props.largeImage} alt=\"modalImage\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Searchbar extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n  };\r\n\r\n  heandleChange = (e) => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  heandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue);\r\n    this.setState({ inputValue: \" \" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.heandleSubmit}>\r\n          <button className=\"SearchForm-button\" type=\"submit\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoFocus\r\n            autoComplete=\"off\"\r\n            onChange={this.heandleChange}\r\n            value={this.state.inputValue}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n","import axios from \"axios\";\r\n\r\nconst fetchImagesWithQuery = (searchQuery, page = 1) => {\r\n  const key = '18623544-b4f5dbb9e909edd8c116f4e97'\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${searchQuery}&page=${page}&key=${key}&image_type=photo&orientation=horizontal&per_page=12`\r\n    )\r\n    .then((response) => response.data.hits);\r\n};\r\n\r\nexport default { fetchImagesWithQuery };\r\n","import React, { Component } from \"react\";\r\nimport Button from \"./Components/Button/Button\";\r\nimport ImageGallery from \"./Components/ImageGallery/ImageGallery\";\r\nimport ImageGalleryItem from \"./Components/ImageGalleryItem/ImageGalleryItem\";\r\nimport LoaderSpinner from \"./Components/Loader/Loader\";\r\nimport Modal from \"./Components/Modal/Modal\";\r\nimport Searchbar from \"./Components/Searchbar/Searchbar\";\r\nimport PixabayApi from \"./Components/PixabayApi/pixabayApi\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    images: [],\r\n    loading: false,\r\n    showModal: false,\r\n    searchQuery: \"\",\r\n    error: null,\r\n    page: 1,\r\n    text: \"\",\r\n    largeImage: null,\r\n  };\r\n\r\n  scrolling = () => {\r\n    window.scrollTo({\r\n      top: document.documentElement.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const prevQuery = prevState.searchQuery;\r\n    const nextQuery = this.state.searchQuery;\r\n    if (prevQuery !== nextQuery) {\r\n      this.fetchImages();\r\n    }\r\n    if (this.state.page > 2 && !this.state.showModal) {\r\n      this.scrolling();\r\n    }\r\n  }\r\n\r\n  fetchImages = () => {\r\n    const { searchQuery, page } = this.state;\r\n    this.setState({ loader: true });\r\n    PixabayApi.fetchImagesWithQuery(searchQuery, page)\r\n      .then((images) =>\r\n        this.setState((prevState) => ({\r\n          images: [...prevState.images, ...images],\r\n          page: prevState.page + 1,\r\n        }))\r\n      )\r\n      .catch((error) => this.setState(error, \"Some error\"))\r\n      .finally(() => this.setState({ loader: false }));\r\n  };\r\n\r\n  hendleSearchFormSubmit = (query) => {\r\n    this.setState({ searchQuery: query, page: 1, images: [] });\r\n  };\r\n\r\n  parseLargeImage = (url) => {\r\n    this.setState(() => {\r\n      return {\r\n        largeImage: url,\r\n      };\r\n    });\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState((state) => ({\r\n      showModal: !state.showModal,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { showModal, images, loader, largeImage } = this.state;\r\n    return (\r\n      <div>\r\n        <Searchbar onSubmit={this.hendleSearchFormSubmit} />\r\n\r\n     \r\n            <ImageGallery>\r\n              <ImageGalleryItem\r\n                parseLargeImage={this.parseLargeImage}\r\n                images={images}\r\n                toggleModal={this.toggleModal}\r\n              />\r\n            </ImageGallery>\r\n          \r\n\r\n      \r\n             {loader ? (\r\n               <LoaderSpinner />\r\n            ) : (!!images.length &&  <Button fetchImages={this.fetchImages} />\r\n        )}\r\n\r\n        {showModal && (\r\n          <Modal largeImage={largeImage} toggleModal={this.toggleModal} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}